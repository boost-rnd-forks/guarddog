import logging
import os
from typing import List
import subprocess

from guarddog.scanners.maven_package_scanner import MavenPackageScanner
from guarddog.scanners.scanner import Dependency, ProjectScanner, DependencyVersion

log = logging.getLogger("guarddog")


class MavenDeoendenciesScanner(ProjectScanner):
    def __init__(self) -> None:
        super().__init__(MavenPackageScanner())

    def parse_requirements(self, raw_requirements: str) -> List[Dependency]:
        """
        Parses requirements generated in `raw_requirements` (str)
        Expects raw_requirements to be the content of
        a txt file generated by `mvn dependency:tree`
        Returns:
            list[Dependency]:
                - name (str): group_id:artifact_id
                - version (str)
        """
        log.debug("Parsing requirements generated...")
        dependencies: List[Dependency] = []
        idx = 0
        for line in raw_requirements.splitlines():
            idx += 1
            group_id, artifact_id, type, version, phase = line.split(":")
            name = group_id + ":" + artifact_id
            versions: set[DependencyVersion] = set()
            versions.add(DependencyVersion(version=version, location=idx))
            dep = Dependency(name=name, versions=versions)
            dependencies.append(dep)

        return dependencies

    def find_requirements(self, directory: str) -> list[str]:
        """
        Extracts direct dependencies of a Maven project using `mvn dependency:tree`.
        Args:
            directory (str): Path to the root directory of the Maven project
        Returns:
            List[str]: Path to the written file containing the list of direct dependencies
        """
        log.debug("Generating the dependency tree...")
        if not os.path.isdir(directory):
            raise ValueError("The provided path must be a java project directory.")
        output_file = os.path.join(directory, "dependencies.txt")
        resulting_path: list[str] = []
        try:
            # Run `mvn dependency:tree` for direct dependencies
            result = subprocess.run(
                ["mvn", "dependency:tree", "-DoutputType=text"],
                cwd=directory,
                capture_output=True,
                text=True,
                check=True,
            )

            output = result.stdout
            lines = output.splitlines()

            direct_dependencies = []
            inside_main_module = False

            for line in lines:
                # do not analyze non relevant lines
                if line.strip().startswith("[INFO] --- dependency:"):
                    inside_main_module = True
                    continue
                if not inside_main_module or not line.strip().startswith("[INFO]"):
                    continue

                content = line.strip()[len("[INFO]") :].lstrip()

                # Capture only direct dependencies
                if content.startswith("+-") or content.startswith("\\-"):
                    direct_dependencies.append(content.strip()[2:].lstrip())
                elif content.startswith("|"):
                    break  # stop when nested level starts

            # Write dependencies to file
            with open(output_file, "w") as f:
                for dep in direct_dependencies:
                    f.write(dep + "\n")

            resulting_path.append(output_file)
            return resulting_path

        except subprocess.CalledProcessError as e:
            print("Failed to run mvn dependency:tree")
            print("Error:", e.stderr)
            return []
